# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QApplication

import pandas as pd
from qtpandas.models.DataFrameModel import DataFrameModel

from ui.main_basic import Ui_MainWindow
from pk4adi import PK,PkError


class Ui_My_MainWindow(Ui_MainWindow):
    def __init__(self):
        super(Ui_MainWindow, self).__init__()
        self.model = None
        self.data = None

    def setupUi(self, MainWindow):
        super().setupUi(MainWindow)
        self.widget_table.tableView.setSortingEnabled(False)
        self.model = DataFrameModel()
        self.widget_table.setViewModel(self.model)

        self.init_table()
        self.init_label()

        self.action_open.triggered.connect(self.open)
        self.pushButton_open.clicked.connect(self.open)
        self.pushButton_copy.clicked.connect(self.copy)
        self.action_author.triggered.connect(self.show_author)
        self.action_logs.triggered.connect(self.show_changelogs)

    def init_table(self):
        n_case = 4
        df = pd.DataFrame({'x': [0] * n_case,
                           'y': [0] * n_case,
                           'k': range(n_case),
                           'Ry': [0] * n_case,
                           'Cx': [0] * n_case,
                           'PKm': [0.0] * n_case})
        self.model.setDataFrame(df)

    def init_label(self):
        self.label_pk.setStyleSheet("color:blue")
        self.label_pk.setText("待更新")

    def open(self):
        self.update_statusbar("开始新一轮PK的计算！")
        self.label_pk.setText("待更新")
        f = QFileDialog.getOpenFileName(
            None, "打开", "D:\\UrgeData\\Desktop", ".csv *.*")
        file = f[0]
        if file == "" or file is None:
            self.update_statusbar("未选中打开任何文件或选中文件为空！")
            return None
        self.update_statusbar("选中打开文件为 %s ！"%file)
        if file.endswith(".csv"):
            self.data = pd.read_csv(file)
            self.update_statusbar("读取选中文件 %s 完成！" % file)
        elif file.endswith(".xls") or file.endswith(".xlsx"):
            self.data = pd.read_excel(file)
            self.update_statusbar("读取选中文件 %s 完成！" % file)
        else:
            self.update_statusbar("读取选中文件 %s 失败，不支持的文件类型！" % file)
            return
        self.calculate_display()

    def copy(self):
        clipboard = QApplication.clipboard()
        clipboard.setText(self.label_pk.text())
        self.update_statusbar("当前PK值已复制至粘贴板，可供需要直接粘贴使用！")

    def update_logs(self,info):
        text = self.label_assit.text()
        text = text + "\n" +self.add_timestamp(info)
        self.label_assit.setText(text)

    def calculate_display(self):
        pk = PK()
        state = pk.calculate_pk(dataframe=self.data)
        if PK.CHECK_CASE_ERROR_DATA_FRAME_COLUMNS <= state <= PK.CHECK_Y_ERROR_CONTAIN_VALUES:
            self.update_statusbar(PkError.errors.get(state))
            return

        self.model.setDataFrame(pk.data)
        self.update_statusbar(PkError.errors.get(PK.ALL_CHECKS_OK))
        if state ==PK.JACKKNIFE_WARN:
            self.update_statusbar(PkError.errors.get(PK.JACKKNIFE_WARN))
        self.update_statusbar(PkError.errors.get(PK.ALL_CALCULATION_OK))

        self.label_pk.setText("%.3f" % pk.dict.get("PK"))
        self.update_logs("PK值为 %.3f "% pk.dict.get("PK"))
        self.update_logs("SE0 is %.3f" % pk.dict.get("SE0"))
        self.update_logs("SE1 is %.3f" % pk.dict.get("SE1"))

        if state != PK.JACKKNIFE_WARN:
            self.update_logs("PKj is %.3f" % pk.dict.get("PKj"))
            self.update_logs("SEj is %.3f" % pk.dict.get("SEj"))
        self.update_logs("所有辅助矩阵数值如下")
        self.update_logs("A " +str(pk.A))
        self.update_logs("S " + str(pk.S))
        self.update_logs("SA " + str(pk.SA))
        self.update_logs("C " + str(pk.C))
        self.update_logs("CA " + str(pk.CA))
        self.update_logs("D " + str(pk.D))
        self.update_logs("DA " + str(pk.DA))
        self.update_logs("T " + str(pk.T))
        self.update_logs("TA " + str(pk.TA))


    def show_author(self):
        from help.author import author
        self.about_author = author.Ui_Author_MainWindow()
        self.update_statusbar("显示作者信息")
        self.about_author.show()

    def show_changelogs(self):
        from help.changelogs import changelogs
        self.about_changelogs = changelogs.Ui_Changelogs_MainWindow()
        self.update_statusbar("显示更新日志")
        self.about_changelogs.show()

    def update_statusbar(self, msg):
        self.statusbar.clearMessage()
        self.statusbar.showMessage(self.add_timestamp(msg), 5000)
        self.update_logs(msg)

    def add_timestamp(self,msg):
        datetime = QtCore.QDateTime.currentDateTime()
        text = datetime.toString("HH:mm:ss") + "  " + msg
        return text


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_My_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
