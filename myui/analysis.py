# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'analysis.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import pandas as pd
import time
import os
import traceback

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QStringListModel
from PyQt5.QtWidgets import QMessageBox

from pk4adi.pk import calculate_pk
from pk4adi.pkc import compare_pks

from utils.logger import Logger
from utils.dirs import get_out_dir
from myui.mydialog import Ui_Dialog

class Ui_MainWindow(QtWidgets.QMainWindow):

    def __init__(self, data =None):
        super(QtWidgets.QMainWindow, self).__init__()
        self.setupUi(self)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("./figures/pk.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.setWindowIcon(icon)

        self.data = data
        self.log = Logger().get_logger()
        self.log.info("基于当前显示数据进行分析，分析窗口初始化开始")

        self.add2x = False
        self.add2y = False


        self.list_model_all = QStringListModel()
        self.listView_all.setModel(self.list_model_all)

        self.list_model_x = QStringListModel()
        self.listView_x.setModel(self.list_model_x)

        self.list_model_y = QStringListModel()
        self.listView_y.setModel(self.list_model_y)
        self.init_view()
        self.load_data(data)

        self.pk_columns = ["ID", "Independent variables", "Test variables", "PK", "SE0", "SE1", "Jackknife", "PKj", "SEj"]
        self.pks_columns = ["ID", "Independent variables", "Test variables A", "Test variables B",
                                           "PKD", "SED", "ZD", "P value of norm", "Comment 1",
                                           "PKDJ", "SEDJ", "DF", "TD", "P value of t", "Comment 2"]
        self.out_dir =  None
        self.init_outdir()

        self.pk_dict = {}
        self.name_dict = {}
        self.n_pk = 0

        self.pkc_dict = {}
        self.names_dict = {}
        self.n_pks = 0

        self.pre = None

        self.log.info("分析窗口初始化完成")

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setWindowModality(QtCore.Qt.ApplicationModal)
        MainWindow.setEnabled(True)
        MainWindow.resize(1600, 1200)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(1600, 1200))
        MainWindow.setMaximumSize(QtCore.QSize(1600, 1200))
        MainWindow.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.listView_y = QtWidgets.QListView(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.listView_y.sizePolicy().hasHeightForWidth())
        self.listView_y.setSizePolicy(sizePolicy)
        self.listView_y.setMinimumSize(QtCore.QSize(700, 300))
        self.listView_y.setObjectName("listView_y")
        self.gridLayout_2.addWidget(self.listView_y, 2, 2, 1, 1)
        self.listView_all = QtWidgets.QListView(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.listView_all.sizePolicy().hasHeightForWidth())
        self.listView_all.setSizePolicy(sizePolicy)
        self.listView_all.setMinimumSize(QtCore.QSize(700, 0))
        self.listView_all.setMaximumSize(QtCore.QSize(700, 16777215))
        self.listView_all.setObjectName("listView_all")
        self.gridLayout_2.addWidget(self.listView_all, 2, 0, 3, 1)
        self.pushButton_all = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_all.sizePolicy().hasHeightForWidth())
        self.pushButton_all.setSizePolicy(sizePolicy)
        self.pushButton_all.setObjectName("pushButton_all")
        self.gridLayout_2.addWidget(self.pushButton_all, 3, 1, 1, 1)
        self.pushButton_x = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_x.sizePolicy().hasHeightForWidth())
        self.pushButton_x.setSizePolicy(sizePolicy)
        self.pushButton_x.setObjectName("pushButton_x")
        self.gridLayout_2.addWidget(self.pushButton_x, 4, 1, 1, 1)
        self.listView_x = QtWidgets.QListView(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.listView_x.sizePolicy().hasHeightForWidth())
        self.listView_x.setSizePolicy(sizePolicy)
        self.listView_x.setMinimumSize(QtCore.QSize(700, 0))
        self.listView_x.setMaximumSize(QtCore.QSize(700, 16777215))
        self.listView_x.setObjectName("listView_x")
        self.gridLayout_2.addWidget(self.listView_x, 4, 2, 1, 1)
        self.label_all = QtWidgets.QLabel(self.centralwidget)
        self.label_all.setObjectName("label_all")
        self.gridLayout_2.addWidget(self.label_all, 1, 0, 1, 1)
        self.label_x = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_x.sizePolicy().hasHeightForWidth())
        self.label_x.setSizePolicy(sizePolicy)
        self.label_x.setObjectName("label_x")
        self.gridLayout_2.addWidget(self.label_x, 3, 2, 1, 1)
        self.pushButton_y = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_y.sizePolicy().hasHeightForWidth())
        self.pushButton_y.setSizePolicy(sizePolicy)
        self.pushButton_y.setObjectName("pushButton_y")
        self.gridLayout_2.addWidget(self.pushButton_y, 2, 1, 1, 1)
        self.label_y = QtWidgets.QLabel(self.centralwidget)
        self.label_y.setObjectName("label_y")
        self.gridLayout_2.addWidget(self.label_y, 1, 2, 1, 1)
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem, 0, 0, 1, 1)
        self.pushButton_pk = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_pk.setMinimumSize(QtCore.QSize(100, 0))
        self.pushButton_pk.setObjectName("pushButton_pk")
        self.gridLayout.addWidget(self.pushButton_pk, 0, 1, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem1, 0, 2, 1, 1)
        self.pushButton_pks = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_pks.setMinimumSize(QtCore.QSize(100, 0))
        self.pushButton_pks.setObjectName("pushButton_pks")
        self.gridLayout.addWidget(self.pushButton_pks, 0, 3, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem2, 0, 4, 1, 1)
        self.pushButton_open_dir = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_open_dir.setMinimumSize(QtCore.QSize(100, 0))
        self.pushButton_open_dir.setObjectName("pushButton_open_dir")
        self.gridLayout.addWidget(self.pushButton_open_dir, 0, 5, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem3, 0, 6, 1, 1)
        self.gridLayout_2.addLayout(self.gridLayout, 0, 0, 1, 3)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "计算PK"))
        self.pushButton_all.setText(_translate("MainWindow", "添加全部"))
        self.pushButton_x.setText(_translate("MainWindow", "添加"))
        self.label_all.setText(_translate("MainWindow", "所有变量"))
        self.label_x.setText(_translate("MainWindow", "检验变量"))
        self.pushButton_y.setText(_translate("MainWindow", "添加"))
        self.label_y.setText(_translate("MainWindow", "独立变量"))
        self.pushButton_pk.setText(_translate("MainWindow", "计算PK值"))
        self.pushButton_pks.setText(_translate("MainWindow", "比较PK值"))
        self.pushButton_open_dir.setText(_translate("MainWindow", "打开文件夹"))

    def init_outdir(self):
        root = get_out_dir()
        full_path = root + "\Analysis_" + time.strftime("%Y-%m-%d", time.localtime())
        if not os.path.exists(full_path):
            os.mkdir(full_path)
        QMessageBox.information(None, "输出目录设置成功", "本次分析的文件输出目录已设置为 " + full_path, QMessageBox.Ok)
        self.out_dir = full_path
        self.log.info("本次分析的文件输出目录已设置为 " + full_path)

    def load_data(self, df):
        if isinstance(df, pd.DataFrame):
            self.list_model_all.setStringList(df.columns)
            self.log.info("载入数据的列名成功")
            self.log.info(df.columns)

    def init_view(self):
        self.pushButton_x.setEnabled(False)
        self.pushButton_y.setEnabled(False)
        self.pushButton_all.setEnabled(False)

        self.listView_all.setEditTriggers(QtWidgets.QAbstractItemView.EditTrigger.NoEditTriggers)
        self.listView_all.clicked.connect(self.enable_all_buttons)

        self.listView_x.setEditTriggers(QtWidgets.QAbstractItemView.EditTrigger.NoEditTriggers)
        self.listView_x.clicked.connect(self.disable_button_x)

        self.listView_y.setEditTriggers(QtWidgets.QAbstractItemView.EditTrigger.NoEditTriggers)
        self.listView_y.clicked.connect(self.disable_button_y)

        self.pushButton_x.clicked.connect(self.clicked_button_x)
        self.pushButton_y.clicked.connect(self.clicked_button_y)
        self.pushButton_all.clicked.connect(self.clicked_button_all)
        self.pushButton_pk.clicked.connect(self.clicked_button_pk)
        self.pushButton_pks.clicked.connect(self.clicked_button_pks)
        self.pushButton_open_dir.clicked.connect(self.clicked_button_open_dir)

    def clicked_button_open_dir(self):
        os.startfile(self.out_dir)
        self.log.info("已打开本次分析的输出目录 "+self.out_dir)

    def enable_all_buttons(self):
        self.add2x = True
        self.add2y = True
        self.pushButton_x.setEnabled(True)
        self.pushButton_y.setEnabled(True)
        self.pushButton_all.setEnabled(True)
        self.pushButton_x.setText("添加")
        self.pushButton_y.setText("添加")
        self.pushButton_all.setText("添加全部")

    def disable_button_x(self):
        self.add2x = False
        self.pushButton_x.setText("移除")
        self.pushButton_all.setText("移除全部")

    def disable_button_y(self):
        self.add2y = False
        self.pushButton_y.setText("移除")

    def exchange_selected_list(self, start, end):
        selected = start.selectedIndexes()
        for i in selected:
            num = i.row()
            temp = start.model().stringList()
            line = temp[num]
            del (temp[num])
            start.model().setStringList(temp)
            temp = end.model().stringList()
            temp.append(line)
            end.model().setStringList(temp)

    def exchange_all_list(self, start, end):
        temp = end.model().stringList()
        for i in start.model().stringList():
            temp.append(i)
        start.model().setStringList([])
        end.model().setStringList(temp)

    def show_selected_list_names(self, l):
        selected = l.selectedIndexes()
        ans = []
        for i in selected:
            num = i.row()
            line = l.model().stringList()[num]
            ans.append(line)
        return ans

    def show_list_names(self, l):
        return l.model().stringList()

    def clicked_button_x(self):
        if self.add2x:
            self.log.debug("数据中以下列已被设为观测变量")
            self.log.debug(self.show_selected_list_names(self.listView_all))
            self.exchange_selected_list(self.listView_all, self.listView_x)
            self.log.debug("数据中以下列为当前观测变量")
            self.log.debug(self.show_list_names(self.listView_x))
        else:
            self.log.debug("数据中以下列已从观测变量中移除")
            self.log.debug(self.show_selected_list_names(self.listView_x))
            self.exchange_selected_list(self.listView_x, self.listView_all)
            self.log.debug("数据中以下列为当前观测变量")
            self.log.debug(self.show_list_names(self.listView_x))

    def clicked_button_y(self):
        if self.add2y:
            if len(self.listView_y.model().stringList()) == 0:
                self.exchange_selected_list(self.listView_all, self.listView_y)
                self.log.debug("数据中以下列已被设为独立变量")
                self.log.debug(self.show_list_names(self.listView_y))
            else:
                QMessageBox.critical(None, "参数错误", "一次分析只能设置一个独立变量！", QMessageBox.Ok)
                self.log.error("一次分析只能设置一个独立变量，下列设置为独立变量时发生错误")
                self.log.error(self.show_selected_list_names(self.listView_all))
                self.log.error("数据中以下列已被设为独立变量")
                self.log.error(self.show_list_names(self.listView_y))
        else:
            self.exchange_selected_list(self.listView_y, self.listView_all)
            self.log.debug("数据中以下列已从独立变量移除，当前独立变量为空")
            self.log.debug(self.show_list_names(self.listView_y))

    def clicked_button_all(self):
        if self.add2x:
            self.log.debug("数据中以下列已统一被设为观测变量")
            self.log.debug(self.show_list_names(self.listView_all))
            self.exchange_all_list(self.listView_all, self.listView_x)
            self.log.debug("数据中以下列为当前观测变量")
            self.log.debug(self.show_list_names(self.listView_x))
        else:
            self.log.debug("数据中以下列已统一从观测变量中移除")
            self.log.debug(self.show_list_names(self.listView_x))
            self.exchange_all_list(self.listView_x, self.listView_all)
            self.log.debug("数据中以下列为当前观测变量")
            self.log.debug(self.show_list_names(self.listView_x))

    def clicked_button_pk(self):
        pk_ready = len(self.listView_x.model().stringList()) > 0 and len(self.listView_y.model().stringList()) > 0
        self.log.info("开始计算PK值")
        self.log.info("数据中以下列已被设为独立变量")
        self.log.info(self.show_list_names(self.listView_y))
        self.log.info("数据中以下列为当前观测变量")
        self.log.info(self.show_list_names(self.listView_x))

        if not pk_ready:
            QMessageBox.warning(None, "参数错误", "PK值计算需要设置一个独立变量和至少一个检验变量！", QMessageBox.Ok)
            self.log.error("PK值计算需要设置一个独立变量和至少一个检验变量")
            return
        y_name = self.listView_y.model().stringList()[0]
        x_names = self.listView_x.model().stringList()

        df = pd.DataFrame(columns=self.pk_columns)
        index = 0

        for x_name in x_names:
            self.log.info("开始计算 {0} 与 {1} 的PK值".format(x_name, y_name))
            ans = self.query_pk(x_name, y_name)
            if None != ans:
                self.log.info("计算 {0} 与 {1} 的PK值成功，其结果已缓存")
                new_row = [index + 1, y_name, x_name, ans.get("PK"), ans.get("SE0"), ans.get("SE1"),
                           ans.get("jack_ok"), ans.get("PKj"), ans.get("SEj")]
                df.loc[index] = new_row
                index = index + 1

        self.log.info("本次PK值计算结束，具体结果为")
        self.log.info(df)
        self.log.info("上述结果准备输出为下列文件")

        pre = time.strftime("%H-%M-%S", time.localtime()) + "_PK"
        csv_name_utf8 = os.path.join(self.out_dir, pre + "_utf8.csv")
        csv_name_ansi = os.path.join(self.out_dir, pre + "_ansi.csv")
        xlsx_name = os.path.join(self.out_dir, pre + ".xlsx")
        self.log.info(csv_name_utf8)
        self.log.info(csv_name_ansi)
        self.log.info(xlsx_name)

        df = df.round(3)

        try:
            self.log.debug("开始写入以上文件")
            df.to_csv(csv_name_utf8)
            df.to_csv(csv_name_ansi, encoding="ansi")
            df.to_excel(xlsx_name)
            write_ok = True
        except Exception as e:
            info = traceback.format_exc()
            self.log.error("以上文件写入失败")
            self.log.error("具体原因为")
            self.log.error(e)
            self.log.error(info)
            write_ok = False
        if write_ok:
            QMessageBox.information(None, "PK值计算完成", "已完成对当前选择数据的PK值计算，请查看输出文件夹的最新.csv文件与.xlsx文件。", QMessageBox.Ok)
            self.log.info("以上文件写入成功")
            self.pre = pre
            dialog = Ui_Dialog(self)
            dialog.show()
            dialog.Get_text.connect(self.write_text)



    def clicked_button_pks(self):
        pks_ready = len(self.listView_x.model().stringList()) > 1 and len(self.listView_y.model().stringList()) > 0
        self.log.info("开始比较PK值")
        self.log.info("数据中以下列已被设为独立变量")
        self.log.info(self.show_list_names(self.listView_y))
        self.log.info("数据中以下列为当前观测变量")
        self.log.info(self.show_list_names(self.listView_x))
        if not pks_ready:
            QMessageBox.warning(None, "参数错误", "PK值比较需要设置一个独立变量和至少两个检验变量！", QMessageBox.Ok)
            self.log.error("PK值比较需要设置一个独立变量和至少两个检验变量")
            return
        y_name = self.listView_y.model().stringList()[0]
        x_names = self.listView_x.model().stringList()

        df = pd.DataFrame(columns=self.pks_columns)
        index = 0

        for i in x_names:
            for j in x_names:
                if i != j:
                    self.log.info("开始比较 {0} 和 {1} 分别与 {2} 的PK值".format(i, j, y_name))
                    ans = self.query_pkc(i, j, y_name)
                    if None != ans:
                        self.log.info("比较 {0} 和 {1} 分别与 {2} 的PK值成功，其结果已缓存".format(i, j, y_name))
                        new_row = [index + 1, y_name, i, j,
                                   ans.get("PKD"), ans.get("SED"), ans.get("ZD"), ans.get("ZP"), ans.get("ZJ"),
                                   ans.get("PKDJ"), ans.get("SEDJ"), ans.get("DF"), ans.get("TD"), ans.get("TP"),
                                   ans.get("TJ")]
                        df.loc[index] = new_row
                        index = index + 1

        self.log.info("本次PK值比较结束，具体结果为")
        self.log.info(df)
        self.log.info("上述结果准备输出为下列文件")

        pre = time.strftime("%H-%M-%S", time.localtime()) + "_PKC"
        csv_name_utf8 = os.path.join(self.out_dir, pre + "_utf8.csv")
        csv_name_ansi = os.path.join(self.out_dir, pre + "_ansi.csv")
        xlsx_name = os.path.join(self.out_dir, pre + ".xlsx")
        self.log.info(csv_name_utf8)
        self.log.info(csv_name_ansi)
        self.log.info(xlsx_name)

        df = df.round(3)

        try:
            self.log.debug("开始写入以上文件")
            df.to_csv(csv_name_utf8)
            df.to_csv(csv_name_ansi, encoding="ansi")
            df.to_excel(xlsx_name)
            write_ok = True
        except Exception as e:
            info = traceback.format_exc()
            self.log.error("以上文件写入失败")
            self.log.error("具体原因为")
            self.log.error(e)
            self.log.error(info)
            write_ok = False
        if write_ok:
            QMessageBox.information(None, "PK值比较已完成", "已完成对当前选择数据的PK值比较，请查看输出文件夹的最新的.csv文件与.xlsx文件。", QMessageBox.Ok)
            self.log.info("以上文件写入成功")
            self.pre = pre
            dialog = Ui_Dialog(self)
            dialog.show()
            dialog.Get_text.connect(self.write_text)

    def query_pk(self, xn, yn):
        self.log.debug("查询 {0} 与 {1} 的PK值是否已有缓存".format(xn, yn))
        for k in self.name_dict:
            if [xn, yn] == self.name_dict.get(k, "unknown"):
                self.log.debug("查询成功，直接返回该值")
                return self.pk_dict.get(k, "unknown")
        self.log.debug("查询失败，开始计算")
        pk = self.pk(xn, yn)
        self.log.debug("计算成功，更新缓存")
        key = str(self.n_pk)
        self.name_dict.update({key: [xn, yn]})
        self.pk_dict.update({key: pk})
        self.n_pk = self.n_pk + 1
        return pk

    def query_pkc(self, x1, x2, y):
        self.log.debug("查询 {0} 和 {1} 分别与 {2} 的PK值的比较结果是否已有缓存".format(x1, x2, y))
        for k in self.names_dict:
            if [x1, x2, y] == self.names_dict.get(k, "unknown"):
                self.log.debug("查询成功，直接返回该值")
                return self.pkc_dict.get(k, "unknown")
        self.log.debug("查询失败，开始计算并比较")
        pk1 = self.query_pk(x1, y)
        pk2 = self.query_pk(x2, y)
        if None != pk1 and None != pk2:
            ans = self.pks(pk1, pk2)
            self.log.debug("计算成功，更新缓存")
            key = str(self.n_pks)
            self.names_dict.update({key: [x1, x2, y]})
            self.pkc_dict.update({key: ans})
            self.n_pks = self.n_pks + 1
            return ans
        return None

    def pk(self, xn, yn):
        x = self.data.loc[:, xn]
        y = self.data.loc[:, yn]

        if x.apply(lambda n: not isinstance(n, (int, float))).any():
            QMessageBox.warning(None, "值错误", "检验变量 " + xn + " 数据类型错误，需要为整型或浮点型！", QMessageBox.Ok)
            self.log.warning("检验变量 " + xn + " 数据类型错误，需要为整型或浮点型")
            return None
        if x.isna().any():
            QMessageBox.warning(None, "值错误", "检验变量 " + xn + " 包含非数值字符！", QMessageBox.Ok)
            self.log.warning("检验变量 " + xn + " 包含非数值字符")
            return None
        if y.apply(lambda n: not isinstance(n, (int, float))).any():
            QMessageBox.warning(None, "值错误", "独立变量 " + yn + " 数据类型错误，需要为整型或浮点型！", QMessageBox.Ok)
            self.log.warning("独立变量 " + yn + " 数据类型错误，需要为整型或浮点型")
            return None
        if y.isna().any():
            QMessageBox.warning(None, "值错误", "独立变量 " + yn + " 包含非数值字符！", QMessageBox.Ok)
            self.log.warning("独立变量 " + yn + " 包含非数值字符")
            return None
        lx = len(x)
        ly = len(y)
        if lx != ly or lx < 2:
            QMessageBox.warning(None, "数据长度错误", "独立变量" + yn + " 与观测变量 " + xn + "长度不等或长度小于2。", QMessageBox.Ok)
            self.log.warning("独立变量" + yn + " 与观测变量 " + xn + "长度不等或长度小于2")
            return None
        sy = y.tolist()
        if len(set(sy)) < 2:
            QMessageBox.warning(None, "值错误", "独立变量" + yn + "需要包含至少2个区分数值。", QMessageBox.Ok)
            self.log.warning("独立变量" + yn + "需要包含至少2个区分数值")
            return None

        ans = calculate_pk(x, y, False)
        self.log.debug(ans)

        return ans

    def pks(self, pk1, pk2):
        try:
            ans = compare_pks(pk1, pk2, False)
        except Exception as e:
            self.log.error(e)
            info = traceback.format_exc()
            self.log.error(info)
            self.log.error("Error")
            return None
        self.log.debug(ans)
        return ans

    def write_text(self, text):
        self.log.info("备注信息为 " + text)
        f = os.path.join(self.out_dir, self.pre+"_Demo.txt")
        self.log.info("准备写入备注信息至 "+f)
        try:
            with open(f, 'a+', encoding='utf-8') as fp:
                fp.write(text)
                fp.close()
                self.log.info("写入备注信息成功")
        except Exception as e:
            info = traceback.format_exc()
            self.log.info("以上文件写入失败")
            self.log.error("具体原因为")
            self.log.error(e)
            self.log.error(info)

